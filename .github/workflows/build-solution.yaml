name: build-solution

# defaults:
#   run:
#     working-directory: WinNUT_V2

on:
  workflow_dispatch:
    inputs:
      buildMode:
        description: 'Solution build mode passed to MSBuild.'
        required: true
        type: string

      version:
        description: 'Version number to refer to this build and its assets, in `v.major.minor.build`.'
        required: true
        type: string
  workflow_call:
    inputs:
      buildMode:
        description: 'Solution build mode passed to MSBuild.'
        required: true
        type: string

      version:
        description: 'Version number to refer to this build and its assets, in `v.major.minor.build`.'
        required: true
        type: string

  # pull_request:
  #   branches: [ main, Dev-2.2 ] # Build for dev primarily, probably don't need main...?
  #   paths:
  #   - '**.vb'
  #   - '**.vbproj'

env:
  DOTNET_VERSION: '4.8'
  SLN_FILE: WinNUT_V2.sln
  SLN_DIR: WinNUT_V2

jobs:
  build:
    name: build-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
    outputs:
      asmVersion: ${{ steps.getversion.outputs.version }}
    steps:
    # Build output goes in this runner's temp directory
    - name: Get output directory
      run: echo "OUTPUT=${{ runner.temp }}\build-output" >> $env:GITHUB_ENV

    # Make MSBuild available from $PATH.
    - name: setup-msbuild
      uses: microsoft/setup-msbuild@v1

    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Restore Packages
      run: msbuild $env:SLN_DIR -t:restore

    # msbuild cannot handle .vdproj Installer projects, so only build debug for now.
    - name: Build solution
      run: msbuild $env:SLN_DIR\$env:SLN_FILE -nologo -property:Configuration=${{ inputs.buildMode }} -property:OutDir=${{ env.OUTPUT }}

    # For now, let msbuild continue autogenerating assembly versions and base everything off of that.
    - name: Get AssemblyVersion generated by msbuild
      id: getversion
      uses: berglie/assembly-version/get@v1
      with:
        directory: ${{ env.OUTPUT }}

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ format('winnut-client-{0}-{1}', inputs.buildMode, vars.GITHUB_WORKFLOW_SHA) }}
        if-no-files-found: error
        path: ${{ env.OUTPUT }}
          
